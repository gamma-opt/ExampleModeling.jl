var documenterSearchIndex = {"docs":
[{"location":"#ExampleModeling.jl-1","page":"Model","title":"ExampleModeling.jl","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"Documentation for ExampleModeling.jl","category":"page"},{"location":"#Model-1","page":"Model","title":"Model","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"We formulate the canonical mixed-integer linear program as follows:","category":"page"},{"location":"#","page":"Model","title":"Model","text":"beginaligned\ntextmaximize  ùêöùê± + ùêõùê≤ \ntextsubject to \n ùêÄ ùê± + ùêÅ ùê≤  ùêú \n ùê±ùê≤  0 \n ùê≤  ‚Ñ§\nendaligned","category":"page"},{"location":"#","page":"Model","title":"Model","text":"We refer to the formulation as model. The model takes as inputs the indices and parameters.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Indices:","category":"page"},{"location":"#","page":"Model","title":"Model","text":"mnk‚Ñ§","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Parameters:","category":"page"},{"location":"#","page":"Model","title":"Model","text":"ùêö‚Ñù^n\nùêõ‚Ñù^k\nùêú‚Ñù^m\nùêÄ‚Ñù^mn\nùêÅ‚Ñù^mk","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The model outputs the variables and objectives.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Variables:","category":"page"},{"location":"#","page":"Model","title":"Model","text":"ùê±‚Ñù^n\nùê≤‚Ñ§^k","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Objectives:","category":"page"},{"location":"#","page":"Model","title":"Model","text":"f(ùê±ùê≤)= ùêöùê± + ùêõùê≤","category":"page"},{"location":"#","page":"Model","title":"Model","text":"You can read more about the theory of integer programming from [1].","category":"page"},{"location":"#API-1","page":"Model","title":"API","text":"","category":"section"},{"location":"#Model-2","page":"Model","title":"Model","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"ExampleModel\nSpecs\nIndices\nParams\nVariables\nObjectives\nExampleModel(::Specs, ::Indices, ::Params)\nVariables(::ExampleModel)\nObjectives(::ExampleModel)","category":"page"},{"location":"#ExampleModeling.ExampleModel","page":"Model","title":"ExampleModeling.ExampleModel","text":"Defines the ExampleModel type.\n\n\n\n\n\n","category":"type"},{"location":"#ExampleModeling.Specs","page":"Model","title":"ExampleModeling.Specs","text":"Specifies the control flow of the model. For example, it can be used to toggle on and off specific constraints or objectives.\n\n\n\n\n\n","category":"type"},{"location":"#ExampleModeling.Indices","page":"Model","title":"ExampleModeling.Indices","text":"Contains indices of the model.\n\n\n\n\n\n","category":"type"},{"location":"#ExampleModeling.Params","page":"Model","title":"ExampleModeling.Params","text":"Contains the parameters of the model.\n\n\n\n\n\n","category":"type"},{"location":"#ExampleModeling.Variables","page":"Model","title":"ExampleModeling.Variables","text":"Contains the variable values of the model.\n\n\n\n\n\n","category":"type"},{"location":"#ExampleModeling.Objectives","page":"Model","title":"ExampleModeling.Objectives","text":"Contains the objective values of the model.\n\n\n\n\n\n","category":"type"},{"location":"#ExampleModeling.ExampleModel-Tuple{Specs,Indices,Params}","page":"Model","title":"ExampleModeling.ExampleModel","text":"Initializes the ExampleModel.\n\n\n\n\n\n","category":"method"},{"location":"#ExampleModeling.Variables-Tuple{JuMP.Model}","page":"Model","title":"ExampleModeling.Variables","text":"Queries the variable values from the model into Variables type.\n\n\n\n\n\n","category":"method"},{"location":"#ExampleModeling.Objectives-Tuple{JuMP.Model}","page":"Model","title":"ExampleModeling.Objectives","text":"Queries the objective values from the model into Objectives type.\n\n\n\n\n\n","category":"method"},{"location":"#IO-1","page":"Model","title":"IO","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"save_json\nload_json","category":"page"},{"location":"#ExampleModeling.save_json","page":"Model","title":"ExampleModeling.save_json","text":"Saves the given DataType into JSON file.\n\nArguments\n\ndtype\noutput_path::AbstractString: Full filepath, e.g., path.json.\n\n\n\n\n\n","category":"function"},{"location":"#ExampleModeling.load_json","page":"Model","title":"ExampleModeling.load_json","text":"Loads values from JSON file to given DataType.\n\nArguments\n\ndtype: DataType\nfilepath::AbstractString\n\n\n\n\n\n","category":"function"},{"location":"#Utility-1","page":"Model","title":"Utility","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"model_to_dtype","category":"page"},{"location":"#ExampleModeling.model_to_dtype","page":"Model","title":"ExampleModeling.model_to_dtype","text":"The function queries values from the model to data type based on its field names. It extracts values from DenseAxisArray from its data field. Then, it converts the values to the corresponding field type. The function rounds integers before conversion because JuMP outputs integer variables as floats. \n\nArguments\n\ndtype: DataType.\nmodel::Model: JuMP.Model.\n\n\n\n\n\n","category":"function"},{"location":"#References-1","page":"Model","title":"References","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"[1]: Wolsey, L. A. (1998). Integer programming. Wiley.","category":"page"}]
}
